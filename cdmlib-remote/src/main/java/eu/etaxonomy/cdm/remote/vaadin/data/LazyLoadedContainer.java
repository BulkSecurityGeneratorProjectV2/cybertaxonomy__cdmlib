package eu.etaxonomy.cdm.remote.vaadin.data;

import java.io.Serializable;
import java.util.List;
import java.util.UUID;

import com.vaadin.data.util.BeanContainer;
import com.vaadin.data.util.BeanItem;
import com.vaadin.server.VaadinSession;

import eu.etaxonomy.cdm.api.service.IClassificationService;
import eu.etaxonomy.cdm.api.service.IDescriptionService;
import eu.etaxonomy.cdm.api.service.ITaxonNodeService;
import eu.etaxonomy.cdm.model.common.CdmBase;
import eu.etaxonomy.cdm.model.taxon.Classification;
import eu.etaxonomy.cdm.model.taxon.Taxon;
import eu.etaxonomy.cdm.model.taxon.TaxonNode;
import eu.etaxonomy.cdm.remote.dto.vaadin.CdmTaxonTableCollection;

public class LazyLoadedContainer extends BeanContainer implements Serializable{

	/** autogenerated **/
	private static final long serialVersionUID = 1L;

	
	transient ITaxonNodeService taxonNodeService;
	transient IClassificationService classificationService;
	transient IDescriptionService descriptionService;
	
	VaadinSession session;
	UUID uuid; 
	Classification classification;
	
	public LazyLoadedContainer(Class type, IClassificationService classificationService, ITaxonNodeService taxonNodeService) throws IllegalArgumentException {
		super(type);
		this.classificationService = classificationService;
		this.taxonNodeService = taxonNodeService;
	}
//	
//	public LazyLoadedContainer(Class type, IClassificationService classificationService, ITaxonNodeService taxonNodeService, IDescriptionService descriptionService) throws IllegalArgumentException {
//		super(type);
//		this.classificationService = classificationService;
//		this.taxonNodeService = taxonNodeService;
//		this.descriptionService = descriptionService;
//		
//	}
	
	@Override
	public int size(){
		session = VaadinSession.getCurrent();
		uuid = UUID.fromString(session.getAttribute("classificationUUID").toString());
		classification = classificationService.load(uuid);
		int countAllNodesForClassification = taxonNodeService.countAllNodesForClassification(classification);
		return countAllNodesForClassification;
	}
	
	@Override
	public BeanItem getItem(Object itemId){
		TaxonNode taxonNode = ((TaxonNode) itemId);
		CdmBase.deproxy(taxonNode, TaxonNode.class);
		Taxon taxon = (Taxon)taxonNode.getTaxon();
		CdmBase.deproxy(taxon, Taxon.class);
		CdmTaxonTableCollection cttc = new CdmTaxonTableCollection(taxon);
		return new BeanItem(cttc);
	}
	
	@Override
	public List getItemIds(int startIndex, int numberOfIds){
		session = VaadinSession.getCurrent();
		uuid = UUID.fromString(session.getAttribute("classificationUUID").toString());
		classification = classificationService.load(uuid);
		int endIndex = startIndex + numberOfIds;
		System.out.println("startIndex: " + startIndex + ", endIndex: " +endIndex);
		List<TaxonNode> listAllNodesForClassification = taxonNodeService.listAllNodesForClassification(classification, startIndex, endIndex);
		return listAllNodesForClassification;
	}

}
