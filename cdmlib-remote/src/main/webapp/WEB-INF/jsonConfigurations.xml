<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
    http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context-2.5.xsd
    http://www.springframework.org/schema/tx   http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
    ">
	   
     <!-- default configuration for RESTful read(/write) service -->
    <bean name="jsonConfig" class="eu.etaxonomy.cdm.remote.json.JsonConfigFactoryBean" init-method="init">
        <property name="jsonBeanProcessorMatcher">
            <bean class="eu.etaxonomy.cdm.remote.json.processor.CdmProxyBeanProcessorMatcher" />
        </property>
        <property name="jsonBeanProcessors">
			<map>
				<entry key="org.hibernate.proxy.HibernateProxy">
	                    <bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateProxyBeanProcessor"/>
	            </entry>
	            <entry key="eu.etaxonomy.cdm.model.common.TermBase">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.TermBaseBeanProcessor" />
                </entry>
                <entry key="eu.etaxonomy.cdm.model.description.TextData">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.TextDataBeanProcessor" />
                </entry>
            </map>
        </property>
        <property name="jsonPropertyFilters">
            <list>
                <bean class="eu.etaxonomy.cdm.remote.json.util.InitializedHibernatePropertyFilter"/>
            </list>
        </property>
        <property name="jsonValueProcessors">
            <map>
            	<entry key="org.hibernate.proxy.HibernateProxy">
            		<bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateJSONValueProcessor" />
            	</entry>
                <entry key="java.util.UUID">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.UUIDJSONValueProcessor"/>
                </entry>
                <entry key="org.joda.time.DateTime">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.DateTimeJSONValueProcessor"/>
                </entry>
                <entry key="java.util.Calendar">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.CalendarJSONValueProcessor"/>
                </entry>
                <entry key="org.joda.time.Partial">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.PartialJSONValueProcessor"/>
                </entry>
                <entry key="java.lang.Class">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.ClassJSONValueProcessor"/>
                </entry>
            </map>
        </property>
        <property name="ignoreDefaultExcludes" value="true" />
        <property name="excludes">
            <list value-type="java.lang.String">
				<value>declaringClass</value><!-- DefaultExclude -->
				<value>metaClass</value><!-- DefaultExclude -->
				<value>id</value>
                <value>cacheStrategy</value>
			</list>
		</property>
    </bean>
    
    <!-- configuration for RESTful taxonomy service -->
    <bean name="jsonConfigTaxonomy" class="eu.etaxonomy.cdm.remote.json.JsonConfigFactoryBean" init-method="init">
        <property name="jsonBeanProcessorMatcher">
            <bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateProxyBeanProcessorMatcher"/>
        </property>
          <property name="jsonBeanProcessors">
            <map>
                <entry key="org.hibernate.proxy.HibernateProxy">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateProxyBeanProcessor"/>
                </entry>
                <entry key="eu.etaxonomy.cdm.model.taxon.TaxonNode">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.TaxonNodeBeanProcessor"/>
                </entry>
            </map>
        </property>
        <property name="jsonPropertyFilters">
            <list>
                <bean class="eu.etaxonomy.cdm.remote.json.util.InitializedHibernatePropertyFilter"/>
            </list>
        </property>
        <property name="jsonValueProcessors">
            <map>
                <entry key="org.hibernate.proxy.HibernateProxy">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateJSONValueProcessor" />
                </entry>
                <entry key="java.util.UUID">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.UUIDJSONValueProcessor"/>
                </entry>
                <entry key="org.joda.time.DateTime">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.DateTimeJSONValueProcessor"/>
                </entry>
                <entry key="java.util.Calendar">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.CalendarJSONValueProcessor"/>
                </entry>
                <entry key="org.joda.time.Partial">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.PartialJSONValueProcessor"/>
                </entry>
                <entry key="java.lang.Class">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.ClassJSONValueProcessor"/>
                </entry>
            </map>
        </property>
		<property name="ignoreDefaultExcludes" value="true" />
        <property name="excludes">
            <list value-type="java.lang.String">
				<value>declaringClass</value><!-- DefaultExclude -->
				<value>metaClass</value><!-- DefaultExclude -->
                <value>id</value>
                <value>cacheStrategy</value>
            </list>
        </property>
    </bean> 
    
    <!-- configuration for RESTful portal service -->
    
    <bean name="jsonConfigPortal" class="eu.etaxonomy.cdm.remote.json.JsonConfigFactoryBean" init-method="init">
        <property name="jsonBeanProcessorMatcher">
            <bean class="eu.etaxonomy.cdm.remote.json.processor.CdmProxyBeanProcessorMatcher"/>
        </property>
          <property name="jsonBeanProcessors">
            <map>
                <entry key="org.hibernate.proxy.HibernateProxy">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateProxyBeanProcessor"/>
                </entry>
                <entry key="eu.etaxonomy.cdm.model.taxon.Taxon">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.TaxonBeanProcessor"/>
                </entry>
                <entry key="eu.etaxonomy.cdm.model.name.TaxonNameBase">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.TaxonNameBaseBeanProcessor"/>
                </entry>
                <entry key="eu.etaxonomy.cdm.model.name.NameRelationship">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.NameRelationshipBeanProcessor"/>
                </entry>
                <entry key="eu.etaxonomy.cdm.model.taxon.TaxonRelationship">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.TaxonRelationshipBeanProcessor"/>
                </entry> 
                <entry key="eu.etaxonomy.cdm.model.common.TermBase">
                        <bean class="eu.etaxonomy.cdm.remote.json.processor.TermBaseBeanProcessor">
                        	<property name="replaceRepresentations" value="true" />
                        </bean>
                </entry>
                <entry key="eu.etaxonomy.cdm.model.description.TextData">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.TextDataBeanProcessor">
                    	<property name="replaceMultilanguageText" value="true" />
                    </bean>
                </entry>
            </map>
        </property>
        <property name="jsonPropertyFilters">
            <list>
                <bean class="eu.etaxonomy.cdm.remote.json.util.InitializedHibernatePropertyFilter"/>
            </list>
        </property>
        <property name="jsonValueProcessors">
            <map>
                <entry key="org.hibernate.proxy.HibernateProxy">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.HibernateJSONValueProcessor" />
                </entry>
                <entry key="java.util.UUID">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.UUIDJSONValueProcessor"/>
                </entry>
                <entry key="org.joda.time.DateTime">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.DateTimeJSONValueProcessor"/>
                </entry>
                <entry key="java.util.Calendar">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.CalendarJSONValueProcessor"/>
                </entry>
                <entry key="org.joda.time.Partial">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.PartialJSONValueProcessor"/>
                </entry>
                <entry key="java.lang.Class">
                    <bean class="eu.etaxonomy.cdm.remote.json.processor.ClassJSONValueProcessor"/>
                </entry>
            </map>
        </property>
        <property name="ignoreDefaultExcludes" value="true" />
        <property name="excludes">
            <list value-type="java.lang.String">
				<value>declaringClass</value><!-- DefaultExclude -->
				<value>metaClass</value><!-- DefaultExclude -->
                <value>id</value>
                <value>annotations</value>
                <value>cacheStrategy</value>
                <value>markers</value>
                <!--  FIXME must exclude partOf, kindOf, includes, generalizationOf .. to avoid class cast or lazy loading exceptions in TDWG Areas -->
                <value>partOf</value>
                <value>kindOf</value>
                <value>includes</value>
                <value>generalizationOf</value>
            </list>
        </property>
    </bean> 
</beans>