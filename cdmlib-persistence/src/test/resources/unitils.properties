#
# NOTE: this is the unitils.properties file for the cdmlib-persitence module
# a separate unitils.properties exists for cdmlib-io
#
#
# the list of all properties is found in
# http://unitils.org/unitils-default.properties
#
#######################################################################################
#
# List of modules that is loaded. Overloading this list is normally not useful, unless you want to add a custom
# module. Disabling a module can be performed by setting unitils.module.<modulename>.enabled to false.
# If a module's specific dependencies are not found (e.g. hibernate is not in you classpath), this module is not loaded,
# even if it is in this list and the enabled property is set to true. It's therefore not strictly necessary to disable
# any of these modules.
#DEFAULT: unitils.modules=database,dbunit,hibernate,mock,easymock,inject,spring,jpa
unitils.module.easymock.enabled=false
unitils.module.mock.enabled=false


database.driverClassName=org.hsqldb.jdbcDriver
database.url=jdbc:hsqldb:mem:cdm
database.userName=sa
database.password=
database.dialect=hsqldb
database.schemaNames=PUBLIC

org.dbunit.dataset.datatype.IDataTypeFactory.implClassName.hsqldb=eu.etaxonomy.cdm.test.integration.HsqldbDataTypeFactory

dbMaintainer.script.locations=src/test/resources/dbscripts
dbMaintainer.dbVersionSource.autoCreateVersionTable=true
dbMaintainer.autoCreateExecutedScriptsTable=true

# If set to commit, each test is run in a transaction, which is committed.
DatabaseModule.Transactional.value.default=commit

# org.unitils.database.transaction.impl.DefaultUnitilsTransactionManager is used by default:
#
#   Implements transactions for unit tests, by delegating to a spring PlatformTransactionManager.
#   The concrete implementation of PlatformTransactionManager that is used depends on the test class.
#   If a custom PlatformTransactionManager was configured in a spring ApplicationContext, this one is used.
#   If not, a suitable subclass of PlatformTransactionManager is created, depending on the configuration
#   of a test. E.g. if some ORM persistence unit was configured on the test, a PlatformTransactionManager
#   that can offer transactional behavior for such a persistence unit is used.
#   If no such configuration is found, a DataSourceTransactionManager is used.
#
# org.unitils.database.transaction.UnitilsTransactionManager.implClassName=org.unitils.database.transaction.impl.SpringTransactionManager

updateDataBaseSchema.enabled=true

dataSetStructureGenerator.xsd.dirName=src/test/resources/eu/etaxonomy/cdm/persistence/dao/hibernate/

HibernateModule.configuration.implClassName=org.hibernate.cfg.Configuration
