 -----
 Spring Json View
 -----
 Kai Ulrich
 -----

Errorhandling
~~~~~~~~~~~~~~

 The errorhandling is triggered after the controller adds some Global- or FieldErrors (the BindingResult) to the model.
 

 [[1.]] Configuration

 [[2.]] HttpStatusError
 
 [[3.]] ModelFlagError
 
 [[4.]] CustomImplementaton of JsonErrorHandler
 
 
* 1. Configuration : view.xml
~~~~~~~~~~~~~~~~~~~

 After the errors (Global- and Field-) have been prepared to be converted into a json-string, 
 all registered JsonErrorHandlers are triggered in the order they were added.
 
 The following JsonErrorHandlers are implemented:
 
 * HttpStatusError 
 
   Sets a new Response-Status by response.setStatus(errorCode); 
   Some Ajax-Frameworks for example {{{http://www.prototypejs.org/api/ajax/request}prototypejs}} trigger the onSuccess (200 - 299) or onFailure (>=300) by ResponseStatusCodes
   
   The Default Code is 311.
 
 * ModelFlagError
  
  Adds a simple key-value-pair to the model. 
  Some Web2.0 Gui-frameworks need a flag to validate a success or failure of the serverside action. Ext for example needs a failure=true or success=true
  
  The Default flag is failure=true
  
 []
+-------------------------------------------------------+
<beans>
    <bean name="jsonView" class="org.springframework.web.servlet.view.json.JsonView">
        <property name="jsonErrors">
            <list>
                <ref bean="statusError" />
                <ref bean="modelflagError" />
            </list>
        </property>
    </bean>
    
    <bean name="statusError" 
          class="org.springframework.web.servlet.view.json.error.HttpStatusError"/>
    
    <bean name="modelflagError" 
          class="org.springframework.web.servlet.view.json.error.ModelFlagError"/>
</beans>

Result:
=======

Response-Status : 311

{"command":{
            "birthday":"30-01-2008",
            "placeofbirth":"Sydney"
           },
 "failure":"true",
 "hasGlobalErrors":"true",
 "globalerrors": ["errormessage1","errormessage2"],  
 "hasFieldErrors":"true",
 "fielderrors":{
             "birthday":"Please enter a valide date!"
}}
+-------------------------------------------------------+

* 2. HttpStatusError
~~~~~~~~~~~~~~~~~~~

 You can customize the StatusErrorCode added to the response by setting the errorCode property of the HttpStatusError Bean.

+-------------------------------------------------------+
<beans>
    <bean name="jsonView" class="org.springframework.web.servlet.view.json.JsonView">
        <property name="jsonErrors">
            <list>
                <ref bean="statusError" />
            </list>
        </property>
    </bean>
    
    <bean name="statusError" 
          class="org.springframework.web.servlet.view.json.error.HttpStatusError">
        <property name="errorCode"><value>999</value></property>
    </bean>
 </beans>

Result:
=======

Response-Status : 999

{"command":{
            "birthday":"30-01-2008",
            "placeofbirth":"Sydney"
           },
 "hasGlobalErrors":"true",
 "globalerrors": ["errormessage1","errormessage2"],  
 "hasFieldErrors":"true",
 "fielderrors":{
             "birthday":"Please enter a valide date!"
}}
+-------------------------------------------------------+

* 3. ModelFlagError
~~~~~~~~~~~~~~~~~~~

 You can customize the  key-value-pair added to the model by setting the key- and the value-property  of the ModelFlagError Bean.


+-------------------------------------------------------+
<beans>
    <bean name="jsonView" class="org.springframework.web.servlet.view.json.JsonView">
        <property name="jsonErrors">
            <list>
                <ref bean="statusError" />
                <ref bean="modelflagError" />
            </list>
        </property>
    </bean>
    
    <bean name="modelflagError" 
          class="org.springframework.web.servlet.view.json.error.ModelFlagError">
        <property name="name"><value>failure</value></property>
        <property name="value"><value>true</value></property>
    </bean>
</beans>

Result:
=======

Response-Status : 200

{"command":{
            "birthday":"30-01-2008",
            "placeofbirth":"Sydney"
           },
 "failure":"true",
 "hasGlobalErrors":"true",
 "globalerrors": ["errormessage1","errormessage2"],  
 "hasFieldErrors":"true",
 "fielderrors":{
             "birthday":"Please enter a valide date!"
}}
+-------------------------------------------------------+


* 4. Custom implementation of JsonErrorHandler
~~~~~~~~~~~~~~~~~~~
 It is possible to realize some totally different behaviours by implementing the JsonErrorHandler.
 
+-------------------------------------------------------+
public class MyErrorHandler implements JsonErrorHandler {
    public void triggerError(Map model, RequestContext rc, BindingResult br,  
                             HttpServletRequest request, HttpServletResponse response) 
                             throws Exception{
			
			// Do something ...
    }
	
}
+-------------------------------------------------------+
